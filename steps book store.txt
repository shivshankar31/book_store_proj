mkvirtualenv book_store
pip3 install django 
django startproject book_store

open folder in vscode 

create repo in git, 
github:
…or create a new repository on the command line
echo "# test" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/shivshankar31/book_store_django.git
git push -u origin main

…or push an existing repository from the command line
git remote add origin https://github.com/shivshankar31/book_store_django.git
git branch -M main
git push -u origin main

…or import code from another repository
You can initialize this repository with code from a Subversion, Mercurial, or TFS project.

step1: 73: create app & add to setting.py and create database field
step 1.1: python3 manage.py startapp book_outlet
step 1.2: if bd file is not created, create db.sqlight3 next to manage.py
step 1.3: In app models.py create class and field which creates DB structure, (Note: uniq identifier with auto increment is not requuired because it will be created automaticly).
step 1.4: In settings.py add created app in INSTSTALLES_APP section

Step 2: 74: 
step 2.1: run "python3 manage.py makemigrations" to create migrations file inside migration folder. now 0001_init.py file is created.
step 2.2: run "python3 manage.py migrate" to create table in bd.sqlite3 file 
 
Step 3 : 75,76 add data to DB using shell cmd line, and view
(note: some changes where made on models.py file)
step 3.1: now we are adding some books to the DB through shell command line, to open shell from terminal type "python3 manage.py shell", now follow the below steps to add books to DB.
    >>> from book_outlet.models import Book
    >>> Harry_Potter = Book(title = "Harry Potter and the Philosopher's Stone", rating = 5)
    >>> Harry_Potter.save()
    >>> lord_of_the_rings = Book(title = "Lord of the rings - Volume One", rating = 4
    >>> lord_of_the_rings.save()
step 3.2: now to view the entries that we made run below command, "objects.all()" will show the object that we created. like all() it has moe function .
    >>> Book.objects.all() 

step 4: 77: adding more field, setting validators, default value
step 4.1: In models.py, define __str__ with f string to view the book entries, to view the entries you have the quit the shell and reload.
step 4.2: now we have added new fileds author and is bestselling also set validator to rating by importing max and minvaluevalidator, now run "makemigrations" and new file 0003 will be created. run "migrate" to add in the DB
step 4.3: run below commands in shell to view the entries we created, we can used index, '.' field name to view the entry etc.
    >>> from book_outlet.models import Book
    >>> Book.objects.all()
        <QuerySet [<Book: Harry Potter and the Philosopher's Stone,(5)>, <Book: Lord of the rings - Volume One,(4)>]>
    >>> Book.objects.all()[1].author
    >>> Book.objects.all()[1].is_bestselling
        False

78: Blank vs Null : blank will store empty str, null will be no data like no data empty datatype is stored, by default sql will not allow empty field, so we need to exesplitly mention the null=true. 

step 5: 79, 80, 81, 83, 84: all(), save(), delete(), create(), get(), filter(), '|' or,  good code.
step 5.1: add, verify, save date to the field. (note: save() will perform update and save to database) 
    >>> harry_potter = Book.objects.all()[0] --- assigning to new variable using index.
    >>> harry_potter.title --- using '.'followed by field name, accessing the value 
        "Harry Potter and the Philosopher's Stone"
    >>> lordofrings = Book.objects.all()[1]
    >>> lordofrings.title
        'Lord of the rings - Volume One'
    >>> harry_potter.author = 'J.K. Rowling' --- adding author 
    >>> harry_potter.is_bestselling = True --- adding bestselling
    >>> lordofrings.author = "Shiv"
    >>> lordofrings.is_bestselling = True
    >>> harry_potter.save() --- save the changes to DB 
    >>> lordofrings.save()
    >>> Book.objects.all()[0].author --- view the change we made into the DB
        'J.K. Rowling'
    >>> Book.objects.all()[1].author
        'Shiv'
    >>> Book.objects.all()[1].is_bestselling
        True
    >>> Book.objects.all()[0].is_bestselling
        True

step 5.2: delete() is used to delete date or row from the DB
    >>> harry_potter = Book.objects.all()[0] --- assign to variable
    >>> harry_potter.title --- verify
        "Harry Potter and the Philosopher's Stone"
    >>> harry_potter.delete() --- delete 
        (1, {'book_outlet.Book': 1})

step 5.3: add new books without instating variable using create()
    >>> Book.objects.create(title = "New book", rating = 3, author = "R.J. Kumar", is_bestselling = True)
        <Book: New book,(3)>
    >>> Book.objects.create(title = "Life is not alown", rating = 4, author = "Joann Yashica", is_bestselling = True)
        <Book: Life is not alown,(4)>
    >>> Book.objects.create(title = "chase the chalenge", rating = 2, author = "Arokia Kavi Great", is_bestselling = True)
        <Book: chase the chalenge,(2)>
    >>> Book.objects.all() --- view and confirm creation
        <QuerySet [<Book: Lord of the rings - Volume One,(4), Shiv,True>, <Book: New book,(3), R.J. Kumar,True>, <Book: Life is not alown,(4), Joann Yashica,True>, <Book: chase the chalenge,(2), Arokia Kavi Great,True>]>

step 5.4: get() used to get only unique value from a table example id. we can use all field name get(id=3), get(title="")
    >>> Book.objects.get(id=4)
        <Book: Life is not alown,(4), Joann Yashica,True>
    >>> Book.objects.get(title = 'Life is not alown')
        <Book: Life is not alown,(4), Joann Yashica,True>

step 5.5: filter() used to get multiple result. we can use two arg in same filter it use's "and" "__lte" -- lesser than equal, "__contain='life'" string is case sensitive for other SQl but not for sqllite ,  we can learn more filters in django (field lookups) official doc.
    >>> Book.objects.filter(is_bestselling = True)
        <QuerySet [<Book: Lord of the rings - Volume One,(4), Shiv,True>, <Book: New book,(3), R.J. Kumar,True>, <Book: Life is not alown,(4), Joann Yashica,True>, <Book: chase the chalenge,(2), Arokia Kavi Great,True>]>
    >>> Book.objects.filter(rating__lte=4)
        <QuerySet [<Book: Lord of the rings - Volume One,(4), Shiv,True>, <Book: New book,(3), R.J. Kumar,True>, <Book: Life is not alown,(4), Joann Yashica,True>, <Book: chase the chalenge,(2), Arokia Kavi Great,True>]>
    >>> Book.objects.filter(rating__lte=4)
        <QuerySet [<Book: Lord of the rings - Volume One,(4), Shiv,True>, <Book: New book,(3), R.J. Kumar,True>, <Book: Life is not alown,(4), Joann Yashica,True>, <Book: chase the chalenge,(2), Arokia Kavi Great,True>]>
    >>> Book.objects.filter(title__contains="Life", rating__lte=4) 
        <QuerySet [<Book: Life is not alown,(4), Joann Yashica,True>]>

step 5.6: To perform "or" in the filter we need to import - "from djang.db.models import Q"
    >>> Book.objects.filter(Q(rating = 3)|Q(title__contains = 'life')) --- statement is show book contain rating =3 and title contain the word 'life'
        <QuerySet [<Book: New book,(3), R.J. Kumar,True>, <Book: Life is not alown,(4), Joann Yashica,True>]>

Note: we can use or which represent '|' & and which represent ',' in the same filter as mentinon below.
    Book.objects.filter(Q(rating = 3)|Q(title__contains = 'life'), is_bestselling=True)
    <QuerySet [<Book: New book,(3), R.J. Kumar,True>, <Book: Life is not alown,(4), Joann Yashica,True>]>
Note: we can use "and" without raping inside Q(), but it should be added at the last. if you are using in the middle then you should repeit with Q().

step 5.6: how to increase performance?
    To increase the performance we need to assing the filter to a variable, so once we run the code it will save the request in catch memory, so it will not hit the DB again and again.
    >>> rated_book = Book.objects.filter(Q(rating = 3)|Q(title__contains = 'life'), is_bestselling=True)
    >>> print(rated_book)
        <QuerySet [<Book: New book,(3), R.J. Kumar,True>, <Book: Life is not alown,(4), Joann Yashica,True>]

    we can also assign previously assigned variable to another variable adding more filter to it.
    >>> rated = Book.objects.filter(rating__gt = 3)
    >>> tit = rated.filter(title__contains="life")
    >>> print(tit)
        <QuerySet [<Book: Life is not alown,(4), Joann Yashica,True>]>
which is a bad code? the code which is not using catch, mean code which hit again and again for same result.


step 6.1: 85: Bulk Operations
    Besides operations on individual model instances (i.e. deleting one model instance, updating one model instance etc), you can also perform bulk operations:

    You can delete multiple model instances (i.e. database records) at once: https://docs.djangoproject.com/en/3.1/topics/db/queries/#deleting-objects

    You can update multiple model instances (i.e. database records) at once: https://docs.djangoproject.com/en/3.0/ref/models/querysets/#bulk-update

    You can create multiple model instances (i.e. database records) at once: https://docs.djangoproject.com/en/3.0/ref/models/querysets/#bulk-create

step 7: 86: create template, add view, urls file edit project urls.py file
    step 7.1: create base.html file
    step 7.2: create index.html
    step 7.3: create detail_book.html
    step 7.4: add index function in view.py file
    step 7.5: create urls.py file inside app and add urlpatterns, path
    step 7.6: in project urls.py file include path of app urls.py file using include function
    step 7.7: now run the server.

step 8: 87: render index page and list all book
    step 8.1: In app, views.py import model and add sql quary to list all the book.
    step 8.1: In index.html use for loop and dynamicly generate list of all the book.

    step 9: 88: working on detail_book.html page, create function in view
    step 9.1: creat block in detail_book.html file
    step 9.2: In app/view.py create function and return the value
    step 9.3: In urls.py assign the path for the new function
    step 9.4: add try block in view.py to return http404 page, there are two ways, 1.usual try block, 2. using get_object_or_404 function. 

step 10: 89: add url to book title in index page
    There are two methods, methode 1 is adding url tag:
    step 10.1: in urls.py add name to detail_book and also add id as int.
    step 10.2: In index add url tag 

    method 2: define get_absolute_url in models.py and add to index.html
    step 10.3: In models.py add get_absolute_url function and point url name.
    step 10.4: assing the get_absolute_url to index.html

step 11: 90: adding slug field, modify default save method
    step 11.1: add slug field to the class Book in modules.py
    step 11.2: modify default save module, add Super().save() in order to recall the orginal save method.
        Now slug will be created for newly created books, for existing books we need to resave in order to create slug field.
    step 11.3: open shell "python3 manage.py shell" and run below get() and call save()
    >>> from book_outlet.models import Book
    >>> Book.objects.get(title = "chase the chalenge").save()
    >>> Book.objects.get(title = "New_book").save()
    >>> Book.objects.get(title = "chase the chalenge").slug
        'chase-the-chalenge'

step 12: 91: apply the created slug 
    step 12.1: convert url path to slug:slug in urls.py
    step 12.2: convert argument id to slug and compare slug = slug in views.py
    step 12.3: change get_absolute_url function args to self.slug in models.py
        Now refresh the page, url will use the slug value.
    step 12.4: add "db_index = True" to the slug field, it will increases the performance. index can be used where you use it more just to increase the performance.

step 13: 92: find total book, avg rating, shorting 
    step 13.1: find total using count() method in views.py
    step 13.2: find average using aggregate Avg() model in views.py
    step 13.3: sort the book list using order_by function in views.py
    step 13.4: In index.html file insert the total and avg key


Section 7: Admin

step 14: 96: create super user account
    step 14.1: using "python3 manage.py createsuperuser" create user account for administrator to manage the models.
    step 14.1: run the server and /admin/ and login to the admin backend panel.

step 15: 97, 98: add model to admin panel, blank, editable, correction on validator
    step 15.1: in app admin.py file add "admin.site.register(Book)", which allow us to access in admin panel. 
    step 15.2: in step 4.2 insted of maxvaluvalidator i woringly entered maxlengthvalidator, now it is corrected.
Note: As if now we need to enter atleast dummy data in slug field to save the new book entry. to avoide that there are multiple ways to do that.
        1. blank = True - if we pass this on the slug field in models.py file - it allows empty feild. 
        2. editable = False - this remove the field from the add page.
    step 15.3: In models.py, slug feild pass blank = True amd editable = False and check

step 16: 99: configure BookAdmin class, readonly_field, prepopulated_field, ModelAdmin module
prepopulated allowes to generate slug automaticlay, so now we can remove save redefine from modules.py file.
this also allow user to edit slug on their comfort.
    step 16.1: add BookAdmin class, here (ModelAdmin) you can allow some fields to make read only editable etc. poplated_field used to auto populate 
    step 16.2: now the save redefine can be removed because it is populated at admin.py file.

step 17: 100: list_display, list_filter 
    step 17.1: list_display added to admin.py which adds fields to display.
    step 17.2 : list_filter added to admin.py which adds filters.


Section 8: Relationships
types of relationships are 1.one to many , 2. many to many, 3.  one to one

step 18: 104: create author class, and use model.forignkey
    step 18.1: add Author class with first name and last name feild in models.py.
    step 18.2: replace author field in Book class using "model.foreignkey(Author, on-delete= CASCADE, null=true". 
CASCADE - if author deleted, it will delete related book as well
protect - if there is some related data it wont allow to delete.
set_null - if deleted it will set the field to empty
    step 18.3: makemigrations and migrate the changes

step 19: 105: working with relationships using python shell, create new book using author class
    step 19.1: call author class and create firstname and lastname
        >>> from book_outlet.models import Book, Author
        >>> shivs = Author(first_name = "shiv", last_name = "shankar")
        >>> shivs.save()
    Verify created objects:
        >>> Author.objects.all()[0].first_name
            'shiv'
    >>> Author.objects.all()[0].last_name
            'shankar'
    step 19.2: create new book and verify
        >>> New_book1 = Book(title = 'new title', rating = 4, is_bestselling = True, author = shivs)
        >>> New_book1.save()
        >>> Book.objects.all()
            <QuerySet [<Book: new title,(4), Author object (1),True>]>
    step 19.3: using get() save the created book to a variable and you can see for the author field an object is pointed.
        >>> New_bo = Book.objects.get(title = 'new title')
        >>> New_bo.author
            Author: Author object (1)>
        >>> New_bo.rating
            4
        >>> New_bo.is_bestselling
            True
        To verify author object
        >>> New_bo.author.first_name
            'shiv'
        >>> New_bo.author.last_name
            'shankar'

step 20: 106: cross model queries, set, related__name, apply multiple modifiers 
    step 20.1: filter all books by author name
    >>> book_by_author = Book.objects.filter(author__first_name = 'shiv')
    >>> book_by_author
        <QuerySet [<Book: new title,(4), Author object (1),True>]>
we can use multiple modifiers in the same filter
    >>> book_by_author = Book.objects.filter(author__first_name__contains = 'sh')
    >>> book_by_author
        <QuerySet [<Book: new title,(4), Author object (1),True>]>
    step 20.2: create query using author object, if we need to get the books writern by author
get object from author
    >>> shiv = Author.objects.get(first_name = 'shiv')
    >>> shiv
        <Author: Author object (1)>
how to access book field from author query?
there is no book field on author, but djano automaticly create for us using set, it will take the Book class name and turns into lowercase automaticly.
    >>> shiv.book_set
        <django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager object at 0x7f5623de3f70>
    >>> shiv.book_set.all()
        <QuerySet [<Book: new title,(4), Author object (1),True>]>
the above can be achived by another way using related__name:
    step 20.3: related_name , where we can specify our own name for model.forignkey. In models.py add related__name
    step 20.4: makemigration and migrate to save the changes
    step 20.5: 
    shiv_book = Author.objects.get(first_name = "shiv")
    >>> shiv_book
        <Author: Author object (1)>
    >>> shiv_book.xyz.filter(rating__lte = 5)
        <QuerySet [<Book: new title,(4), Author object (1),True>]>

step 21: 107 register author to admin pannel and display fullname 
    step 21.1: admin panel asccess to new class "admin.site.register(Author)" in admin.py file
    step 21.2: create class for Author and try adding display and filter n admin.py file
    step 21.3: redefine __str__function using f' ' string in order to display the object in admin panel in model.py file
    step 21.4: we can also create a templet function as fullname so that we can use it some other place as well model.py file

    