mkvirtualenv book_store
pip3 install django 
django startproject book_store

open folder in vscode 

create repo in git, 
github:
…or create a new repository on the command line
echo "# test" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/shivshankar31/book_store_django.git
git push -u origin main

…or push an existing repository from the command line
git remote add origin https://github.com/shivshankar31/book_store_django.git
git branch -M main
git push -u origin main

…or import code from another repository
You can initialize this repository with code from a Subversion, Mercurial, or TFS project.

step1: 73: create app & add to setting.py and create database field
step 1.1: python3 manage.py startapp book_outlet
step 1.2: if bd file is not created, create db.sqlight3 next to manage.py
step 1.3: In app models.py create class and field which creates DB structure, (Note: uniq identifier with auto increment is not requuired because it will be created automaticly).
step 1.4: In settings.py add created app in INSTSTALLES_APP section

Step 2: 74: 
step 2.1: run "python3 manage.py makemigrations" to create migrations file inside migration folder. now 0001_init.py file is created.
step 2.2: run "python3 manage.py migrate" to create table in bd.sqlite3 file 
 
Step 3 : 75,76 add data to DB using shell cmd line, and view
(note: some changes where made on models.py file)
step 3.1: now we are adding some books to the DB through shell command line, to open shell from terminal type "python3 manage.py shell", now follow the below steps to add books to DB.
    >>> from book_outlet.models import Book
    >>> Harry_Potter = Book(title = "Harry Potter and the Philosopher's Stone", rating = 5)
    >>> Harry_Potter.save()
    >>> lord_of_the_rings = Book(title = "Lord of the rings - Volume One", rating = 4
    >>> lord_of_the_rings.save()
step 3.2: now to view the entries that we made run below command, "objects.all()" will show the object that we created. like all() it has moe function .
    >>> Book.objects.all() 

step 4: 77: adding more field, setting validators, default value
step 4.1: In models.py, define __str__ with f string to view the book entries, to view the entries you have the quit the shell and reload.
step 4.2: now we have added new fileds author and is bestselling also set validator to rating by importing max and minlenghtvalidator, now run "makemigrations" and new file 0003 will be created. run "migrate" to add in the DB
step 4.3: run below commands in shell to view the entries we created, we can used index, '.' field name to view the entry etc.
    >>> from book_outlet.models import Book
    >>> Book.objects.all()
        <QuerySet [<Book: Harry Potter and the Philosopher's Stone,(5)>, <Book: Lord of the rings - Volume One,(4)>]>
    >>> Book.objects.all()[1].author
    >>> Book.objects.all()[1].is_bestselling
        False

78: Blank vs Null : blank will store empty str, null will be no data like no data empty datatype is stored, by default sql will not allow empty field, so we need to exesplitly mention the null=true. 

step 5: 79, 80, 81, 83, 84: all(), save(), delete(), create(), get(), filter(), '|' or,  good code.
step 5.1: add, verify, save date to the field. (note: save() will perform update and save to database) 
    >>> harry_potter = Book.objects.all()[0] --- assigning to new variable using index.
    >>> harry_potter.title --- using '.'followed by field name, accessing the value 
        "Harry Potter and the Philosopher's Stone"
    >>> lordofrings = Book.objects.all()[1]
    >>> lordofrings.title
        'Lord of the rings - Volume One'
    >>> harry_potter.author = 'J.K. Rowling' --- adding author 
    >>> harry_potter.is_bestselling = True --- adding bestselling
    >>> lordofrings.author = "Shiv"
    >>> lordofrings.is_bestselling = True
    >>> harry_potter.save() --- save the changes to DB 
    >>> lordofrings.save()
    >>> Book.objects.all()[0].author --- view the change we made into the DB
        'J.K. Rowling'
    >>> Book.objects.all()[1].author
        'Shiv'
    >>> Book.objects.all()[1].is_bestselling
        True
    >>> Book.objects.all()[0].is_bestselling
        True

step 5.2: delete() is used to delete date or row from the DB
    >>> harry_potter = Book.objects.all()[0] --- assign to variable
    >>> harry_potter.title --- verify
        "Harry Potter and the Philosopher's Stone"
    >>> harry_potter.delete() --- delete 
        (1, {'book_outlet.Book': 1})

step 5.3: add new books without instating variable using create()
    >>> Book.objects.create(title = "New book", rating = 3, author = "R.J. Kumar", is_bestselling = True)
        <Book: New book,(3)>
    >>> Book.objects.create(title = "Life is not alown", rating = 4, author = "Joann Yashica", is_bestselling = True)
        <Book: Life is not alown,(4)>
    >>> Book.objects.create(title = "chase the chalenge", rating = 2, author = "Arokia Kavi Great", is_bestselling = True)
        <Book: chase the chalenge,(2)>
    >>> Book.objects.all() --- view and confirm creation
        <QuerySet [<Book: Lord of the rings - Volume One,(4), Shiv,True>, <Book: New book,(3), R.J. Kumar,True>, <Book: Life is not alown,(4), Joann Yashica,True>, <Book: chase the chalenge,(2), Arokia Kavi Great,True>]>

step 5.4: get() used to get only unique value from a table example id. we can use all field name get(id=3), get(title="")
    >>> Book.objects.get(id=4)
        <Book: Life is not alown,(4), Joann Yashica,True>
    >>> Book.objects.get(title = 'Life is not alown')
        <Book: Life is not alown,(4), Joann Yashica,True>

step 5.5: filter() used to get multiple result. we can use two arg in same filter it use's "and" "__lte" -- lesser than equal, "__contain='life'" string is case sensitive for other SQl but not for sqllite ,  we can learn more filters in django (field lookups) official doc.
    >>> Book.objects.filter(is_bestselling = True)
        <QuerySet [<Book: Lord of the rings - Volume One,(4), Shiv,True>, <Book: New book,(3), R.J. Kumar,True>, <Book: Life is not alown,(4), Joann Yashica,True>, <Book: chase the chalenge,(2), Arokia Kavi Great,True>]>
    >>> Book.objects.filter(rating__lte=4)
        <QuerySet [<Book: Lord of the rings - Volume One,(4), Shiv,True>, <Book: New book,(3), R.J. Kumar,True>, <Book: Life is not alown,(4), Joann Yashica,True>, <Book: chase the chalenge,(2), Arokia Kavi Great,True>]>
    >>> Book.objects.filter(rating__lte=4)
        <QuerySet [<Book: Lord of the rings - Volume One,(4), Shiv,True>, <Book: New book,(3), R.J. Kumar,True>, <Book: Life is not alown,(4), Joann Yashica,True>, <Book: chase the chalenge,(2), Arokia Kavi Great,True>]>
    >>> Book.objects.filter(title__contains="Life", rating__lte=4) 
        <QuerySet [<Book: Life is not alown,(4), Joann Yashica,True>]>

step 5.6: To perform "or" in the filter we need to import - "from djang.db.models import Q"
    >>> Book.objects.filter(Q(rating = 3)|Q(title__contains = 'life')) --- statement is show book contain rating =3 and title contain the word 'life'
        <QuerySet [<Book: New book,(3), R.J. Kumar,True>, <Book: Life is not alown,(4), Joann Yashica,True>]>

Note: we can use or which represent '|' & and which represent ',' in the same filter as mentinon below.
    Book.objects.filter(Q(rating = 3)|Q(title__contains = 'life'), is_bestselling=True)
    <QuerySet [<Book: New book,(3), R.J. Kumar,True>, <Book: Life is not alown,(4), Joann Yashica,True>]>
Note: we can use "and" without raping inside Q(), but it should be added at the last. if you are using in the middle then you should repeit with Q().

step 5.6: how to increase performance?
    To increase the performance we need to assing the filter to a variable, so once we run the code it will save the request in catch memory, so it will not hit the DB again and again.
    >>> rated_book = Book.objects.filter(Q(rating = 3)|Q(title__contains = 'life'), is_bestselling=True)
    >>> print(rated_book)
        <QuerySet [<Book: New book,(3), R.J. Kumar,True>, <Book: Life is not alown,(4), Joann Yashica,True>]

    we can also assign previously assigned variable to another variable adding more filter to it.
    >>> rated = Book.objects.filter(rating__gt = 3)
    >>> tit = rated.filter(title__contains="life")
    >>> print(tit)
        <QuerySet [<Book: Life is not alown,(4), Joann Yashica,True>]>
which is a bad code? the code which is not using catch, mean code which hit again and again for same result.


step 6.1: 85: Bulk Operations
    Besides operations on individual model instances (i.e. deleting one model instance, updating one model instance etc), you can also perform bulk operations:

    You can delete multiple model instances (i.e. database records) at once: https://docs.djangoproject.com/en/3.1/topics/db/queries/#deleting-objects

    You can update multiple model instances (i.e. database records) at once: https://docs.djangoproject.com/en/3.0/ref/models/querysets/#bulk-update

    You can create multiple model instances (i.e. database records) at once: https://docs.djangoproject.com/en/3.0/ref/models/querysets/#bulk-create

step 7: 86: create template, add view, urls file edit project urls.py file
    step 7.1: create base.html file
    step 7.2: create index.html
    step 7.3: create detail_book.html
    step 7.4: add index function in view.py file
    step 7.5: create urls.py file inside app and add urlpatterns, path
    step 7.6: in project urls.py file include path of app urls.py file using include function
    step 7.7: now run the server.

step 8: 87: render index page and list all book
step 8.1: In app, views.py import model and add sql quary to list all the book.
step 8.1: In index.html use for loop and dynamicly generate list of all the book.


